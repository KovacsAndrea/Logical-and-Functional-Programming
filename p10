#|
10.
a) Write a function to return the product of all the numerical atoms from a list, at superficial level.
b) Write a function to replace the first occurence of an element E in a given list with an other element 
O.
c) Write a function to compute the result of an arithmetic expression memorised 
 in preorder on a stack. Examples:
 (+ 1 3) ==> 4 (1 + 3)
 (+ * 2 4 3) ==> 11 [((2 * 4) + 3)
 (+ * 2 4 - 5 * 2 2) ==> 9 ((2 * 4) + (5 - (2 * 2))
d) Write a function to produce the list of pairs (atom n), where atom appears for n times in the parameter 
list. Example:
 (A B A B A C A) --> ((A 4) (B 2) (C 1)).
|#





#|
A) atomsProduct(l1,l2...ln) = {
        1 if the list is empty
        l1 * atomsProduct(l2,l3...ln) if l1 is a numerical atom
        atomsProduct(l2,l3...ln) otherwise 
}
|#
(defun atomsProduct(l)
  (cond
   ((null l) 1)
   ((numberp (car l)) (* (car l) (atomsProduct (cdr l))))
   (T (atomsProduct (cdr l)))
  )
)

#|
 (atomsProduct '(2 (2 3 (4 5)) 3 2 s f e 2 (9 9(9(9)))))
 (atomsProduct '((1 2 3 4 5)))
 (atomsProduct '(0 (1 2 4) 9 9));
|#





#|
B) replaceElem(l1,l2...ln e o) = {
        nil if the list is empty
        o U replaceElem(l2,l3...ln e e) if l1 = e 
        l1 U replaceElem (l2,l3...ln e o) otherwise
}
|#
(defun replaceElem( l e o )
  (cond
   ((null l) nil)
   ((= (car l) e) (cons o (replaceElem (cdr l) e e)))
   (T (cons (car l) (replaceElem (cdr l)  e o)))
   )
)
#|
 (replaceElem '(1 2 3 4 2 3 2 2) 2 100)
|#